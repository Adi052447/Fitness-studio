// Secretary.java
import java.util.ArrayList;

public class Secretary extends Person {
    private int salary;
    private Gym gym;
    private boolean isActive = true;

    public Secretary(Person person, int salary, Gym gym) {
        super(person.getId(), person.getName(), person.getBalance(), person.getGender(), person.getBirthDate());
        this.salary = salary;
        this.gym = gym;
    }

    public void deactivate() {
        isActive = false;
    }

    private void ensureActive() {
        if (!isActive) {
            throw new IllegalStateException("Error: Only the current secretary can perform this action.");
        }
    }

    public void registerClient(Person person) throws DuplicateClientException, InvalidAgeException {
        ensureActive();

        ArrayList<Client> clients = gym.getClients();
        for (Client client : clients) {
            if (client.getId() == person.getId()) {
                throw new DuplicateClientException();
            }
        }

        if (person.getAge() < 18) {
            throw new InvalidAgeException();
        }

        clients.add(new Client(person));
    }

    public ArrayList<Client> getClients() {
        ensureActive();
        return gym.getClients();
    }

    public Session addSession(SessionType type, String dateTime, ForumType forumType, Instructor instructor) throws InstructorNotQualifiedException {
        ensureActive();

        if (!instructor.isQualifiedFor(type)) {
            throw new InstructorNotQualifiedException();
        }

        Session session = SessionFactory.createSession(type, dateTime, forumType, instructor);
        gym.getSessions().add(session);
        return session;
    }

    public void paySalaries() {
        ensureActive();

        int totalSalaries = 0;
        for (Instructor instructor : gym.getInstructors()) {
            int numSessions = 0;

            for (Session session : gym.getSessions()) {
                if (session.getInstructor().equals(instructor)) {
                    numSessions++;
                }
            }

            int salary = numSessions * instructor.getHourlyRate();
            totalSalaries += salary;

            for (Client client : gym.getClients()) {
                if (client.getId() == instructor.getId()) {
                    client.setBalance(client.getBalance() + salary);
                }
            }
        }

        totalSalaries += this.salary;

        if (gym.getBalance() >= totalSalaries) {
            gym.setBalance(gym.getBalance() - totalSalaries);
        } else {
            throw new IllegalStateException("Error: Insufficient balance to pay salaries.");
        }
    }
}